---
import Layout from "../layouts/Layout.astro";
import { Icon } from "astro-icon";
---

<Layout>
	<h2 class="Neohellenic-700 text-4xl font-bold underline text-center mt-4 drop-shadow-lg">Growtopia Reminder</h2>
	<h1 class="text-center text-sm max-w-[60%] self-center text-slate-300 mx-6 drop-shadow-md">Before you could access this page, please log in using your account and license key.</h1>
	<div class="w-full h-full flex justify-center mb-4">
		<div class="max-w-[60%] flex flex-1 flex-col justify-center">
			<button id="login" disabled="true" onclick="login()" class="max-h-16 m-2 p-4 border-white border-solid border-2 rounded-md flex-1 mx-4 bg-slate-700 shadow-md transition-all duration-200 hover:animate-pulse disabled:opacity-10 disabled:hover:animate-none">Login</button>
		</div>
	</div>
	<div class="hidden" id="gated-content">
		<p>You're seeing this content because you're currently <strong>Logged in</strong>.</p>
		<label>
			Access token:
			<pre id="ipt-access-token"></pre>
		</label>
		<label>
			User profile:
			<pre id="ipt-user-profile"></pre>
		</label>
		<button onclick="pingWorker()">Test</button>
	</div>
</Layout>

<script is:inline>
	function setCookie(name, value, days) {
		var expires = "";
		if (days) {
			var date = new Date();
			date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
			expires = "; expires=" + date.toUTCString();
		}
		document.cookie = name + "=" + (value || "") + expires + "; path=/";
	}
</script>

<script is:inline>
	let auth0Client = null;

	const fetchAuthConfig = () => fetch("/auth_config.json");

	const configureClient = async () => {
		const response = await fetchAuthConfig();
		const config = await response.json();

		auth0Client = await auth0.createAuth0Client({
			domain: config.domain,
			clientId: config.clientId,
		});
	};

	window.onload = async () => {
		await configureClient();

		updateUI();

		const isAuthenticated = await auth0Client.isAuthenticated();

		if (isAuthenticated) {
			// Show the gated content
			return;
		}

		// Check for the code and state parameters
		const query = window.location.search;
		if (query.includes("code=") && query.includes("state=")) {
			// Process the login state
			await auth0Client.handleRedirectCallback();

			updateUI();

			// Use replaceState to redirect the user away and remove the querystring parameters
			window.history.replaceState({}, document.title, "/");
		}
	};

	const updateUI = async () => {
		const isAuthenticated = await auth0Client.isAuthenticated();

		if (isAuthenticated) {
			document.getElementById("login").onclick = logout;
			document.getElementById("login").innerText = "Logout";
			document.getElementById("login").disabled = false;
			document.getElementById("gated-content").classList.remove("hidden");
			document.getElementById("ipt-access-token").innerHTML = await auth0Client.getTokenSilently();
			document.getElementById("ipt-user-profile").textContent = JSON.stringify(await auth0Client.getUser());
		} else {
			document.getElementById("login").onclick = login;
			document.getElementById("login").innerText = "Login";
			document.getElementById("login").disabled = false;
			document.getElementById("gated-content").classList.add("hidden");
		}
	};

	const login = async () => {
		await auth0Client.loginWithRedirect({
			authorizationParams: {
				redirect_uri: window.location.origin,
			},
		});
	};

	const logout = () => {
		auth0Client.logout({
			logoutParams: {
				returnTo: window.location.origin,
			},
		});
	};

	async function pingWorker() {
		let token = await auth0Client.getTokenSilently();
		let cookieTokenName = "uw" + "u12" + "3" + "sj";
		const myRequest = new Request("https://gt-reminder.sonicj.workers.dev", {
			method: "GET",
			headers: {
				Authorization: token,
			},
		});
		fetch(myRequest)
			.then((response) => {
				return response.json();
			})
			.then((data) => {
				if (data) {
					setCookie(cookieTokenName, token, 31);
				}
			});
	}
</script>
