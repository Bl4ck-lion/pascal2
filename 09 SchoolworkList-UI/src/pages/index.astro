---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
---

<Layout title="SWL - Home">
	<main class="m-auto max-w-[80%] min-h-[85.75vh] p-6 max-md:max-w-full">
		<h1 class="prose-2xl font-bold">Welcome to <span class="text-gradient">Astro</span></h1>
		<p class="instructions prose mb-4">
			To get started, open the directory <code>src/pages</code> in your project.<br />
			<strong>Code Challenge:</strong> Tweak the "Welcome to Astro" message above.
		</p>
		<ul id="card-list" role="list" class="link-card-grid">
			<div id="card-template" class="hidden">
				<Card title="{title}" href="{href}" tag="{tag}" body="{body}" />
				<Card
					title="Tugas Proposal"
					href="https://www.youtube.com/watch?v=dQw4w9WgXcQ"
					tag="B.INDO"
					body="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque laoreet pretium nibh interdum luctus. Suspendisse eu purus purus."
				/>
			</div>
		</ul>
	</main>
</Layout>

<style>
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(15vw, 1fr));
		gap: 1rem;
		padding: 0;
	}
	@media (min-width: 1401px) and (max-width: 1920px) {
		.link-card-grid {
			display: grid;
			grid-template-columns: repeat(4, minmax(15vw, 1fr));
			gap: 1rem;
			padding: 0;
		}
	}
	@media (min-width: 601px) and (max-width: 1400px) {
		.link-card-grid {
			grid-template-columns: repeat(2, minmax(1vw, 1fr));
		}
	}
	@media (max-width: 600px) {
		.link-card-grid {
			grid-template-columns: repeat(auto-fit, minmax(100%, 2fr)) !important;
		}
	}
</style>

<script>
	// Fetch work lists from Backend
	const backendURL = document.getElementById("backendURL").dataset.backendurl;
	var responseHTML = document.createElement("doc");
	async function fetchData() {
		try {
			const response = await fetch(backendURL);
			const html = await response.text();
			responseHTML.innerHTML = html;
			responseHTML.outerHTML = responseHTML.innerHTML;
		} catch (err) {
			console.warn("Something went wrong when fetching the data needed.", err);
		}
	}
	await fetchData();
	
	// Cards variables
	const cardList = document.querySelector("#card-list");
	const cardTemplates = cardList.querySelector("#card-template");

	// Classwork Entries
	var classWorks = responseHTML.querySelectorAll("#xicmiaEntry")
	classWorks.forEach(classWork => {
		var cardTemplate = cardTemplates.children[0].outerHTML;
		var href = classWork.querySelector("#slug").innerHTML;
		var judul = classWork.querySelector("#judul").innerHTML;
		let tanggal = "<owo class='text-primary underline'>" + classWork.querySelectorAll("#tanggal")[0].innerHTML + "</owo>";
		let tanggalKumpul = "Deadline: " + classWork.querySelectorAll("#tanggal")[1].innerHTML;
		let dikumpul = "Dikumpul dalam bentuk: " + classWork.querySelector("#dalam").innerHTML;
		var body = tanggal + "\n" + tanggalKumpul + "\n" + dikumpul
		var tag = classWork.querySelector("#mataPelajaran").innerHTML;

		// Add templated card
		var card = document.createElement("card");
		card.innerHTML = cardTemplate;
		// Regex it with informations
		card.innerHTML = card.innerHTML.replace(/{href}/g, href);
		card.innerHTML = card.innerHTML.replace(/{title}/g, judul);
		card.innerHTML = card.innerHTML.replace(/{body}/g, body);
		card.innerHTML = card.innerHTML.replace(/{tag}/g, tag);
		// Append and remove the extra "card" HTMLelement on the outerHTML
		cardList.appendChild(card);
		card.outerHTML = card.innerHTML;
	})

	// TMP - For debugging purposes
	// document.body.appendChild(responseHTML);
</script>
