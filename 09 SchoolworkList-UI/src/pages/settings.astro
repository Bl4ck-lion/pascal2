---
import TBI from "../components/TBI.astro";
import ThemeCard from "../components/ThemeCard.astro";
import Toggle from "../components/Toggle.astro";
import Heading from "../components/Heading.astro";
import Layout from "../layouts/Layout.astro";
import Input from "../components/Input.astro";
import Radio from "../components/Radio.astro";
---

<Layout title="SWL - Settings">
	<main class="m-auto min-h-[85.75vh] max-w-[80%] p-6 max-md:max-w-full">
		<h1 class="prose-2xl font-bold">Change <span class="text-gradient">Settings</span></h1>
		<p class="instructions prose mb-4">
			Settings are saved to the browser's localstorage, it won't sync to other devices.<br />
		</p>
		<div id="setting-tabs" class="tabs tabs-boxed border-base-content/10 border font-semibold">
			<a id="general" class="tab tab-active">General</a>
			<a id="personalization" class="tab">Personalization</a>
			<a id="backup" class="tab">Backup</a>
		</div>
		<div id="setting-container" class="border-base-content/10 bg-primary-content/80 my-4 rounded-lg border py-6 px-40 max-lg:px-6">
			<div id="general">
				<div class="flex flex-col pb-4">
					<Heading>Class</Heading>
					<div class="mb-4 flex flex-wrap">
						<div id="setting-classes" class="flex flex-wrap">
							<Radio title="XI-A MIA" id="setting-xiamia"/>
							<Radio title="XI-B MIA" id="setting-xibmia"/>
							<Radio title="XI-C MIA" id="setting-xicmia" checked=""/>
							<Radio title="XI-D MIA" id="setting-xidmia"/>
							<Radio title="XI-A IIS" id="setting-xiaiis"/>
							<Radio title="XI-B IIS" id="setting-xibiis"/>
							<Radio title="XI-C IIS" id="setting-xiciis"/>
							<Radio title="XI-D IIS" id="setting-xidiis"/>
						</div>
					</div>
					<Heading>Performance</Heading>
					<div class="mb-4 flex flex-wrap">
						<Toggle text="Enable Turbo JS" id="setting-turbo-js" checked="" />
						<Toggle text="Enable Analytic" id="setting-analytic" checked="" />
						<Toggle text="Enable Ads" id="setting-ads" checked="" />
						<Toggle text="Disable disclaimer on posts" id="setting-disclaimer" />
					</div>
					<Heading>Other</Heading>
					<div class="mb-4 flex flex-wrap">
						<Toggle text="Use custom Backend server URL" id="setting-custom-backend-url" />
						<Input title="Custom Backend URL" id="setting-custom-backend-url-text" placeholder="Paste custom backend URL here!"/>
					</div>
				</div>
			</div>
			<div id="personalization" class="hidden">
				<Heading>Change Profile</Heading>
				<div class="mb-4 flex flex-wrap">
					<Input title="Customize your username" id="setting-username" placeholder="Anonymous" />
					<Input title="Customize your profile picture" id="setting-profile" placeholder="https://img-os-static.hoyolab.com/avatar/avatar30038.png" />
				</div>
				<Heading>Change Main Theme</Heading>
				<div class="mb-4 flex flex-wrap">
					<ThemeCard theme="dark" />
					<ThemeCard theme="dracula" />
					<ThemeCard theme="night" />
					<ThemeCard theme="halloween" active="theme-selected" />
					<ThemeCard theme="business" />
					<ThemeCard theme="forest" />
					<ThemeCard theme="black" />
					<ThemeCard theme="luxury" />
					<ThemeCard theme="coffee" />
					<ThemeCard theme="light" />
					<ThemeCard theme="emerald" />
					<ThemeCard theme="corporate" />
					<ThemeCard theme="garden" />
					<ThemeCard theme="lofi" />
					<ThemeCard theme="fantasy" />
					<ThemeCard theme="wireframe" />
					<ThemeCard theme="cmyk" />
					<ThemeCard theme="autumn" />
					<ThemeCard theme="acid" />
					<ThemeCard theme="lemonade" />
					<ThemeCard theme="winter" />
					<ThemeCard theme="valentine" />
					<ThemeCard theme="cyberpunk" />
				</div>
			</div>
			<div id="backup" class="hidden">
				<button class="btn">Backup</button>
				<button class="btn btn-primary">Button</button>
				<button class="btn btn-secondary">Button</button>
				<button class="btn btn-accent">Button</button>
				<button class="btn btn-ghost">Button</button>
				<button class="btn btn-link">Button</button>
				<main class="m-auto flex max-w-[80%] flex-col items-center p-6 max-md:max-w-full">
					<TBI />
				</main>
			</div>
			<div id="setting-button" class="flex justify-end max-md:flex-col">
				<button class="btn btn-error m-1">Reset defaults</button>
				<button class="btn btn-primary m-1" onclick="saveSettings()">Save and Apply</button>
			</div>
		</div>
	</main>

	<script is:inline>
		var settingsTab = document.getElementById("setting-tabs");
		var activeTab = document.getElementById("setting-tabs").querySelector(".tab-active");
		var settingsContainer = document.getElementById("setting-container");

		function switchSettingsTab(obj) {
			activeTab.classList.toggle("tab-active");
			obj.classList.toggle("tab-active");
			activeTab = obj;
		}

		function switchSettingsContainer(obj) {
			Array.from(settingsContainer.children).forEach((container) => {
				if (container.id == "setting-button") return;
				container.classList.add("hidden");
			});
			settingsContainer.querySelector("#" + obj.id).classList.remove("hidden");
		}

		Array.from(settingsTab.children).forEach((tab) => {
			tab.addEventListener("click", () => {
				if (tab.classList.contains("tab-active")) return;
				switchSettingsTab(tab);
				switchSettingsContainer(tab);
			});
		});
	</script>
	<script is:inline>
		function handleSettingToggles(elementToggle) {
			switch (elementToggle.id) {
				case "setting-turbo-js":
				case "setting-analytic":
				case "setting-ads":
				case "setting-disclaimer":
					break;
				case "setting-custom-backend-url":
					document.getElementById("setting-custom-backend-url-text").disabled = !elementToggle.checked;
					break;
				default:
					if (elementToggle.id.includes("theme-")) {
						handleSettingTheme(elementToggle);
						break;
					}
					console.log("Setting '", elementToggle.id, "' does not exist");
					break;
			}
		}

		function handleSettingTheme(elementToggle) {
			Array.from(document.getElementsByClassName("theme-selected")).forEach((themeCard) => {
				themeCard.classList.remove("theme-selected");
			});
			elementToggle.classList.add("theme-selected");
			document.querySelector("body").dataset.theme = elementToggle.id.slice(6);
		}

		function handleSettingClass(elementToggle) {
			Array.from(document.getElementsByClassName("class-selected")).forEach((classCard) => {
				classCard.classList.remove("class-selected");
			});
			elementToggle.classList.add("class-selected");
		}

		function saveSettings() {
			let settings = {
				class: document.querySelector(".class-selected").id,
				"turbo-js": document.getElementById("setting-turbo-js").checked,
				"custom-backend-url": document.getElementById("setting-custom-backend-url").checked,
				"custom-backend-url-text": document.getElementById("setting-custom-backend-url-text").value,
				analytic: document.getElementById("setting-analytic").checked,
				ads: document.getElementById("setting-ads").checked,
				disclaimer: document.getElementById("setting-disclaimer").checked,
				theme: document.querySelector(".theme-selected").id.slice(6),
				username: document.getElementById("setting-username").value || document.getElementById("setting-username").placeholder,
				profile: document.getElementById("setting-profile").value || document.getElementById("setting-profile").placeholder,
			};
			localforage.setItem("settings", settings).then(function () {
				applySettings();
			});
		}

		async function restoreSettings() {
			var settings = await localforage.getItem("settings");
			if (settings == undefined) return;
			if (settings["class"]) {
				handleSettingClass(document.getElementById(settings["class"]))
				document.getElementById(settings["class"]).checked = true;
			} else {
				handleSettingClass(document.getElementById("setting-xicmia"))
			}
			document.getElementById("setting-turbo-js").checked = settings["turbo-js"];
			document.getElementById("setting-custom-backend-url").checked = settings["custom-backend-url"];
			document.getElementById("setting-custom-backend-url-text").disabled = !settings["custom-backend-url"];
			document.getElementById("setting-custom-backend-url-text").value = settings["custom-backend-url-text"];
			document.getElementById("setting-analytic").checked = settings["analytic"];
			document.getElementById("setting-ads").checked = settings["ads"];
			document.getElementById("setting-disclaimer").checked = settings["disclaimer"];
			if (settings["theme"]) {
				handleSettingTheme(document.getElementById("theme-" + settings["theme"]));
			} else {
				handleSettingTheme(document.getElementById("theme-halloween"));
			}
			document.getElementById("setting-username").value = settings["username"] || document.getElementById("setting-username").placeholder;
			document.getElementById("setting-profile").value = settings["profile"] || document.getElementById("setting-profile").placeholder;
		}

		addEventListener("turbo:load", () => {
			if (window.location.href.indexOf("settings") > -1) {
				restoreSettings();
			}
		});
	</script>
	<style>
		.text-gradient {
			background-image: var(--accent-gradient);
			-webkit-background-clip: text;
			-webkit-text-fill-color: transparent;
			background-size: 400%;
			background-position: 0%;
		}
	</style>
</Layout>
